/*
const fs = require('fs');

const path = 'UsersFile.json';

class UsersManager {
    async getUsers() {
        try {
            if (fs.existsSync(path)) {
                const usersFile = await fs.promises.readFile(path, 'utf-8');
                return JSON.parse(usersFile);
            } else {
                return [];
            }
        } catch (error) {
            return error;
        }
    }

    async createUser(user) {
        try {
            const users = await this.getUsers();
            let id;
            if (!users.length) {
                id = 1;
            } else {
                id = users[users.length - 1].id + 1;
            }
            users.push({ id, ...user });
            await fs.promises.writeFile(path, JSON.stringify(users));
        } catch (error) {
            return error;
        }
    }

    async getUserById(id) {
        try {
            const users = await this.getUsers();
            const user = users.find(u => u.id === id);
            if (!user) {
                return 'No hay user';
            } else {
                return user;
            }
        } catch (error) {
            return error;
        }
    }

    async deleteUser(id) {
        try {
            const users = await this.getUsers();
            const newArrayUsers = users.filter(u => u.id !== id);
            await fs.promises.writeFile(path, JSON.stringify(newArrayUsers));
        } catch (error) {
            return error;
        }
    }
}

const user1 = {
    first_name: 'John',
    last_name: 'Doe',
    age: 40,
    course: 'JAVASCRIPT'
};

const user2 = {
    first_name: 'Terminator',
    last_name: 'Alien',
    age: 10,
    course: 'WEB'
};

async function test() {
    const manager = new UsersManager();
    await manager.createUser(user1);
    await manager.createUser(user2);
    const users = await manager.getUsers();
    console.log(users);
    // await manager.deleteUser(1)
}

test();*/


const fs = require('fs');

const path = 'ProductsFile.json';

class ProductsManager {
    async getProducts() {
        try {
            if (fs.existsSync(path)) {
                const productsFile = await fs.promises.readFile(path, 'utf-8');
                return JSON.parse(productsFile);
            } else {
                return [];
            }
        } catch (error) {
            return error;
        }
    }

    async addProduct(product) {
        try {
            const products = await this.getProducts();
            let id;
            if (!products.length) {
                id = 1;
            } else {
                id = products[products.length - 1].id + 1;
            }
            products.push({ id, ...product });
            await fs.promises.writeFile(path, JSON.stringify(products));
        } catch (error) {
            return error;
        }
    }

    async getProductById(id) {
        try {
            const products = await this.getProducts();
            const product = products.find(u => u.id === id);
            if (!product) {
                return 'No hay user';
            } else {
                return product;
            }
        } catch (error) {
            return error;
        }
    }

    async deleteProduct(id) {
        try {
            const products = await this.getProducts();
            const index = products.findIndex(product => product.id === id);
    
            if (index !== -1) {
                products.splice(index, 1); // Elimina el producto en el Ã­ndice encontrado
                await fs.promises.writeFile(path, JSON.stringify(products));
            } else {
                throw new Error('El producto no existe');
            }
        } catch (error) {
            return error;
        }
    }
}

const product1 = {

};

const product2 = {

};

async function test() {
    const manager = new ProductsManager();
    await manager.addProduct(product1);
    const products = await manager.getProducts();
    console.log(products);
    await manager.deleteProduct(1)
}

test();
